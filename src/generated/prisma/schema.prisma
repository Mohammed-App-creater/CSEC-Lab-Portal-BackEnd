// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum ClubStatus {
  Active
  Alumni
  Banned
}

enum RoleType {
  SuperAdmin
  President
  VicePresident
  DivisionHead
  Coordinator
  Member
}

model User {
  id               String      @id @default(uuid()) @db.Uuid
  firstName        String?
  middleName       String?
  lastName         String?
  gender           Gender      @default(Male)
  email            String?     @unique
  password         String?
  phone_number     String?     @unique
  telegramUserName String?     @unique
  bio              String?
  berthDate        DateTime?
  profileImageUrl  String?
  clubStatus       ClubStatus?
  specialty        String?
  cvUrl            String?
  lastSeen         DateTime
  role             RoleType    @default(Member)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  universityInfo UniversityInfo?
  Divisions      Divisions?      @relation("UserDivision", fields: [DivisionId], references: [id], onDelete: SetNull)
  DivisionId     String?         @unique @db.Uuid
  socialLinks    socialLink[]    @relation("UserSocialLink")
  UserSetting    UserSetting?    @relation("UserSetting")
  UserSettingId  String?         @unique @db.Uuid
  Badges         Badges[]        @relation("UserBadges")
  events         Events[]        @relation("UserEvents")
  sessions       Sessions[]      @relation("UserSessions")
  groups         Groups[]        @relation("UserGroups")

  //optional relation
  DivisionHeadID       String?                @unique @db.Uuid
  DivisionHead         Divisions?             @relation("DivisionHead")
  TasksCreated         Tasks[]                @relation("UserTasks")
  AssignedTasks        Tasks[]                @relation("AssignedTasks")
  EventParticipation   EventParticipation[]   @relation("EventParticipants")
  SessionParticipation SessionParticipation[] @relation("SessionParticipatedIn")
  TaskParticipation    TaskParticipation[]    @relation("TaskParticipants")
  Attendance           Attendance[]           @relation("Attendance")
  AttendanceSummary    AttendanceSummary?     @relation("AttendanceSummary")
  AttendanceSummaryId  String?                @unique @db.Uuid
  HeadsUp              HeadsUp[]              @relation("HeadsUp")

  Notification  Notification[] @relation("UserNotification")
  Announcements Announcement[] @relation("UserAnnouncement")

  //indexes

  @@index([role])
  @@index([clubStatus])
  @@index([DivisionId])
  @@index([DivisionHeadID])
  @@index([email])
  @@index([phone_number])
  @@index([telegramUserName])
  @@index([lastSeen])
}

enum UniversityStatus {
  onCampus
  offCampus
  withdraw
  dropOut
}

model UniversityInfo {
  id                     String           @id @default(uuid())
  currentYear            Int?
  expectedGraduationYear Int?
  major                  String?
  universityId           String?          @unique
  status                 UniversityStatus
  department             String?
  userId                 String?          @unique @db.Uuid
  user                   User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // indexes
  @@index([status])
}

model UserSetting {
  id                 String  @id @default(uuid()) @db.Uuid
  theme              Theme   @default(System)
  phonePublic        Boolean @default(false)
  authUpdateCalendar Boolean @default(false)

  user   User   @relation("UserSetting", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

enum Theme {
  Light
  Dark
  System
}

model Divisions {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  imageUrl      String?
  establishedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  currentHeadID String?      @unique @db.Uuid
  currentHead   User?        @relation("DivisionHead", fields: [currentHeadID], references: [id], onDelete: SetNull)
  user          User?        @relation("UserDivision")
  socialLinks   socialLink[] @relation("DivisionSocialLink")
  sessions      Sessions[]   @relation("SessionDivision")
  groups        Groups[]     @relation("DivisionGroups")

  // indexes
  @@index([name])
}

model Groups {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users      User[]     @relation("UserGroups")
  divisionId String?    @db.Uuid
  division   Divisions? @relation("DivisionGroups", fields: [divisionId], references: [id], onDelete: SetNull)
  sessions   Sessions[] @relation("SessionTargetGroups")
  events     Events[]   @relation("EventTargetGroups")

  // indexes
  @@index([divisionId])
}

model socialLink {
  id             String     @id @default(uuid()) @db.Uuid
  socialLinkName String
  socialLinkUrl  String
  userId         String?    @db.Uuid
  user           User?      @relation("UserSocialLink", fields: [userId], references: [id], onDelete: Cascade)
  DivisionId     String?    @db.Uuid
  Division       Divisions? @relation("DivisionSocialLink", fields: [DivisionId], references: [id], onDelete: Cascade)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // indexes
  @@index([DivisionId])
  @@index([userId])
}

model EventTimeSlot {
  id        String   @id @default(uuid()) @db.Uuid
  eventId   String?  @db.Uuid
  startTime DateTime
  endTime   DateTime

  event Events? @relation("EventTimeSlot", fields: [eventId], references: [id])

  // indexes
  @@index([eventId]) // EventTimeSlot
}

model SessionTimeSlot {
  id        String   @id @default(uuid()) @db.Uuid
  sessionId String?  @db.Uuid
  startTime DateTime
  endTime   DateTime

  session Sessions? @relation("SessionTimeSlot", fields: [sessionId], references: [id])

  // indexes
  @@index([sessionId])
}

enum EventVisibility {
  PUBLIC
  MEMBERS_ONLY
}

enum Tag {
  CPD
  CBD
  SEC
  DEV
  DS
  ENTIRE
}

enum state {
  Planned
  Ongoing
  Completed
  Canceled
  Postponed
}

enum TaskStatus {
  Pending
  InProgress
  Completed
  Rejected
  CANCELED
}

model Events {
  id          String          @id @default(uuid()) @db.Uuid
  title       String
  description String?
  startDate   DateTime
  startTime   DateTime
  endTime     DateTime
  location    String?
  tags        Tag[]
  visibility  EventVisibility
  state       state
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  creatorId    String               @db.Uuid
  creator      User                 @relation("UserEvents", fields: [creatorId], references: [id])
  timeSlots    EventTimeSlot[]      @relation("EventTimeSlot")
  groups       Groups[]             @relation("EventTargetGroups")
  tasks        Tasks[]              @relation("EventTasks")
  participants EventParticipation[] @relation("SessionParticipants")
  attendance   Attendance[]         @relation("EventAttendance")

  // indexes
  @@index([state])
  @@index([visibility])
  @@index([startDate])
}

model Sessions {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  startMonth  DateTime
  endTMonth   DateTime
  location    String?
  tags        Tag[]
  state       state
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId    String                 @db.Uuid
  creator      User                   @relation("UserSessions", fields: [creatorId], references: [id])
  division     Divisions[]            @relation("SessionDivision")
  timeSlot     SessionTimeSlot[]      @relation("SessionTimeSlot")
  targetGroups Groups[]               @relation("SessionTargetGroups")
  tasks        Tasks[]                @relation("SessionTasks")
  participants SessionParticipation[] @relation("TheSessionParticipants")
  attendance   Attendance[]           @relation("SessionAttendance")

  // indexes
  @@index([state])
  @@index([startMonth])
}

model Tasks {
  id             String     @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  dueDate        DateTime
  status         TaskStatus @default(Pending)
  completedNotes String?
  approvedAt     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  creatorId String @db.Uuid
  creator   User   @relation("UserTasks", fields: [creatorId], references: [id])

  assignedTo User[] @relation("AssignedTasks") //this can handle multiple users

  eventId String? @db.Uuid
  event   Events? @relation("EventTasks", fields: [eventId], references: [id], onDelete: Cascade)

  sessionId String?   @db.Uuid
  session   Sessions? @relation("SessionTasks", fields: [sessionId], references: [id], onDelete: Cascade)

  participants TaskParticipation[] @relation("TaskParticipants")

  // indexes
  @@index([status])
  @@index([dueDate])
}

enum SessionRole {
  Speaker
  Coordinator
  Host
  Organizer
  Mentor
}

enum EventRole {
  ORGANIZER
  PARTICIPANT
  SPEAKER
  COORDINATOR
  HOST
  MENTOR
}

model EventParticipation {
  id            String    @id @default(uuid()) @db.Uuid
  event         Events    @relation("SessionParticipants", fields: [eventId], references: [id])
  eventId       String    @db.Uuid
  user          User      @relation("EventParticipants", fields: [userId], references: [id])
  userId        String    @db.Uuid
  role          EventRole
  score         Int       @default(0)
  feedback      String?
  feedbackScore Int?      @default(0)
  createdAt     DateTime  @default(now())

  // indexes
  @@index([userId]) // might help for dedup checks or fast access
  @@index([eventId]) // might help for dedup checks or fast access
  @@index([eventId, userId]) // might help for dedup checks or fast access
}

model SessionParticipation {
  id            String      @id @default(uuid()) @db.Uuid
  session       Sessions    @relation("TheSessionParticipants", fields: [sessionId], references: [id])
  sessionId     String      @db.Uuid
  user          User        @relation("SessionParticipatedIn", fields: [userId], references: [id])
  userId        String      @db.Uuid
  role          SessionRole
  score         Int         @default(0)
  feedback      String?
  feedbackScore Int?        @default(0)
  createdAt     DateTime    @default(now())

  // indexes
  @@index([role])
  @@index([userId]) // might help for dedup checks or fast access
  @@index([sessionId]) // might help for dedup checks or fast access
  @@index([sessionId, userId]) // might help for dedup checks or fast access
}

model TaskParticipation {
  id            String   @id @default(uuid()) @db.Uuid
  task          Tasks    @relation("TaskParticipants", fields: [taskId], references: [id])
  taskId        String
  user          User     @relation("TaskParticipants", fields: [userId], references: [id])
  userId        String
  role          String
  score         Int      @default(0)
  feedback      String?
  feedbackScore Int?     @default(0)
  createdAt     DateTime @default(now())

  // indexes
  @@index([userId])
  @@index([taskId])
  @@index([userId, taskId]) // might help for dedup checks or fast access
}

enum HeadsUpType {
  SICK
  TRAVEL
  PERSONAL
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  UNMARKED
}

model Attendance {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation("Attendance", fields: [userId], references: [id])
  userId String @db.Uuid

  session   Sessions? @relation("SessionAttendance", fields: [sessionId], references: [id])
  sessionId String?   @db.Uuid

  event   Events? @relation("EventAttendance", fields: [eventId], references: [id])
  eventId String? @db.Uuid

  status    AttendanceStatus @default(UNMARKED)
  timestamp DateTime         @default(now())

  headsUp   HeadsUp? @relation(fields: [headsUpId], references: [id])
  headsUpId String?  @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, sessionId])
  @@unique([userId, eventId])
  @@index([userId])
  @@index([sessionId])
  @@index([eventId])
  @@index([headsUpId])
}

model AttendanceSummary {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation("AttendanceSummary", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  totalEvents     Int
  totalSessions   Int
  totalTasks      Int
  totalAttendance Int
  totalHeadsUps   Int
  totalPresent    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model HeadsUp {
  id     String      @id @default(uuid()) @db.Uuid
  user   User        @relation("HeadsUp", fields: [userId], references: [id])
  userId String
  type   HeadsUpType
  body   String
  sentAt DateTime    @default(now())

  attendance Attendance?

  // indexes
  @@index([type])
  @@index([userId])
}

enum NotificationType {
  Announcement
  Task
  Session
  Event
  Reminder
  Alert
  Update
}

model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  type        String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User[] @relation("UserNotification")

  // indexes
  @@index([type])
}

enum AnnouncementVisibility {
  PUBLIC
  Division_ONLY
  GROUP_ONLY
}

enum AnnouncementType {
  EVENT
  SESSION
  TASK
  GENERAL
}

model Announcement {
  id               String                 @id @default(uuid()) @db.Uuid
  title            String
  description      String?
  visibility       AnnouncementVisibility
  Tags             Tag[]
  announcementType AnnouncementType
  sourceId         String?                @db.Uuid //this can be event or session
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  // Relations
  user User[] @relation("UserAnnouncement")

  // indexes
  @@index([visibility])
  @@index([announcementType])
  @@index([sourceId])
}

model FileCategories {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  files File[] @relation("FileCategories")

  // indexes
  @@index([name])
}

model File {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  type        String
  tag         String?
  size        Int
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categories FileCategories? @relation("FileCategories", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?         @db.Uuid

  // indexes
  @@index([type])
  @@index([tag])
  @@index([categoryId])
}

model Badges {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  imageUrl    String?
  criteria    String?
  points      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User[] @relation("UserBadges")

  // indexes
  @@index([name])
  @@index([points])
}

// Permissions

model Permission {
  id    Int              @id @default(autoincrement())
  key   String           @unique // e.g. 'event.create', 'user.promote'
  label String // e.g. 'Create Event'
  roles RolePermission[]

  // indexes
  @@index([key])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         RoleType
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([role, permissionId]) // Avoid duplicate role-permission mappings
}
