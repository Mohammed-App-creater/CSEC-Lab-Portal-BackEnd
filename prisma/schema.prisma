// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma schema for the Club Management Platform
// You can place this inside your schema.prisma file

// ENUMS
enum RoleType {
  SuperAdmin
  President
  VicePresident
  DivisionHead
  Coordinator
  Member
}

enum UserStatus {
  Active
  Alumni
  Banned
}

enum SessionTag {
  CPD
  CBD
  SEC
  DEV
  DS
  ENTIRE
}

enum SessionState {
  Planned
  Ongoing
  Completed
  Canceled
  Postponed
}

enum AttendanceStatus {
  Present
  Absent
  Excused
}

enum TaskStatus {
  Pending
  InProgress
  Completed
  Rejected
}

enum NotificationType {
  Announcement
  Task
  Session
  Event
  Reminder
  Alert
  Update
}

enum AnnouncementVisibility {
  All
  DivisionOnly
  GroupOnly
}

// MODELS
model User {
  id                       Int                @id @default(autoincrement())
  first_name               String
  middle_name              String
  last_name                String
  email                    String             @unique
  password                 String
  telegram_username        String?
  phone_number             String?
  birth_date               DateTime
  expected_graduation_year Int
  year                     Int
  profile_picture_url      String?
  status                   UserStatus
  division                 Division?          @relation(fields: [division_id], references: [id])
  division_id              Int?
  mentor                   User?              @relation("Mentorship", fields: [mentor_id], references: [id])
  mentor_id                Int?
  mentees                  User[]             @relation("Mentorship")
  Unversity_Department     String
  specialty                String
  bio                      String?
  cv_url                   String?
  last_seen                DateTime
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
  roles                    UserRole[]
  tasks_assigned           Task[]             @relation("AssignedTasks")
  tasks_given              Task[]             @relation("GivenTasks")
  created_sessions         Session[]          @relation("CreatedSessions")
  marked_attendance        Attendance[]       @relation("MarkedAttendance")
  contributions            ContributionScore?
  announcements            Announcement[]
  uploaded_files           File[]
  awarded_badges           MemberBadge[]
  user_settings            UserSettings?
  division_profiles        DivisionProfile[]
  group_memberships        GroupMember[]

  taskAssignments         TaskAssignment[]     @relation("UserTaskAssignments")
  approvedTaskAssignments TaskAssignment[]     @relation("UserApprovedTasks")
  SessionParticipant      SessionParticipant[]
  Attendance              Attendance[]
  AttendanceSummary       AttendanceSummary[]
  Task                    Task[]
  Group                   Group[]
  receivedNotifications   Notification[]       @relation("ReceivedNotifications")
  sentNotifications       Notification[]       @relation("SentNotifications")
  TaskAssignment          TaskAssignment[]
}

model UserRole {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  role        RoleType
  division    Division? @relation(fields: [division_id], references: [id])
  division_id Int?
  assigned_at DateTime
}

model Division {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  logo_url         String?
  established_year Int
  users            User[]
  roles            UserRole[]
  sessions         Session[]
  tasks            Task[]
  groups           Group[]
  file_categories  FileCategory[]
  files            File[]
  announcements    Announcement[]
  DivisionProfile  DivisionProfile[]
}

model DivisionProfile {
  id            Int                  @id @default(autoincrement())
  user          User                 @relation(fields: [user_id], references: [id])
  user_id       Int
  division      Division             @relation(fields: [division_id], references: [id])
  division_id   Int
  university_id String
  social_links  DivisionSocialLink[]
}

model DivisionSocialLink {
  id            Int             @id @default(autoincrement())
  profile       DivisionProfile @relation(fields: [profile_id], references: [id])
  profile_id    Int
  platform_name String
  link          String
}

model Session {
  id             Int                  @id @default(autoincrement())
  title          String
  description    String
  date           DateTime
  time           DateTime
  division       Division?            @relation(fields: [division_id], references: [id])
  division_id    Int?
  tag            SessionTag
  state          SessionState
  created_by     User                 @relation("CreatedSessions", fields: [created_by_id], references: [id])
  created_by_id  Int
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  participants   SessionParticipant[]
  session_groups SessionGroup[]
  tasks          Task[]
  attendance     Attendance[]
}

model SessionParticipant {
  id         Int     @id @default(autoincrement())
  session    Session @relation(fields: [session_id], references: [id])
  session_id Int
  user       User?   @relation(fields: [user_id], references: [id])
  user_id    Int?
  name       String?
  role       String
  task       Task?   @relation(fields: [task_id], references: [id])
  task_id    Int?
}

model SessionGroup {
  id           Int     @id @default(autoincrement())
  session      Session @relation(fields: [session_id], references: [id])
  session_id   Int
  group        Group   @relation(fields: [group_id], references: [id])
  group_id     Int
  is_mandatory Boolean
}

model Attendance {
  id           Int              @id @default(autoincrement())
  session      Session          @relation(fields: [session_id], references: [id])
  session_id   Int
  user         User             @relation(fields: [user_id], references: [id])
  user_id      Int
  status       AttendanceStatus
  marked_by    User             @relation("MarkedAttendance", fields: [marked_by_id], references: [id])
  marked_by_id Int
  marked_at    DateTime
}

model AttendanceSummary {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [user_id], references: [id])
  user_id               Int
  total_sessions        Int
  total_present         Int
  total_absent          Int
  total_excused         Int
  attendance_percentage Float
  last_updated          DateTime
}

model Task {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String
  session            Session?             @relation(fields: [session_id], references: [id])
  session_id         Int?
  division           Division?            @relation(fields: [division_id], references: [id])
  division_id        Int?
  assigned_by        User                 @relation("GivenTasks", fields: [assigned_by_id], references: [id])
  assigned_by_id     Int
  assigned_to        User                 @relation("AssignedTasks", fields: [assigned_to_id], references: [id])
  assigned_to_id     Int
  due_date           DateTime
  status             TaskStatus
  completion_note    String?
  approved_by        User?                @relation(fields: [approved_by_id], references: [id])
  approved_by_id     Int?
  approved_at        DateTime?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  assignments        TaskAssignment[]
  SessionParticipant SessionParticipant[]
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  // Assigned user
  user   User @relation("UserTaskAssignments", fields: [userId], references: [id], map: "fk_task_assignment_user")
  userId Int

  status         TaskStatus
  completionNote String?

  // Approved by user
  approvedBy   User? @relation("UserApprovedTasks", fields: [approvedById], references: [id], map: "fk_task_assignment_approved_by")
  approvedById Int?

  approvedAt DateTime?
  User       User      @relation(fields: [userId], references: [id])
}

model Group {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  division       Division       @relation(fields: [division_id], references: [id])
  division_id    Int
  created_by     User           @relation(fields: [created_by_id], references: [id])
  created_by_id  Int
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  members        GroupMember[]
  session_groups SessionGroup[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [group_id], references: [id])
  group_id  Int
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  joined_at DateTime
}

model ContributionScore {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [user_id], references: [id])
  user_id          Int      @unique
  tasks_score      Int      @default(0)
  events_score     Int      @default(0)
  attendance_score Int      @default(0)
  total_score      Int      @default(0)
  updated_at       DateTime
}

model Notification {
  id Int @id @default(autoincrement())

  user   User @relation("ReceivedNotifications", fields: [userId], references: [id])
  userId Int

  createdBy   User? @relation("SentNotifications", fields: [createdById], references: [id])
  createdById Int?

  title     String
  body      String
  type      NotificationType
  typeId    Int
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Announcement {
  id            Int                    @id @default(autoincrement())
  title         String
  content       String
  created_by    User                   @relation(fields: [created_by_id], references: [id])
  created_by_id Int
  division      Division?              @relation(fields: [division_id], references: [id])
  division_id   Int?
  visible_to    AnnouncementVisibility
  created_at    DateTime               @default(now())
  updated_at    DateTime               @updatedAt
}

model Permission {
  id               Int              @id @default(autoincrement())
  key              String           @unique
  label            String
  role_permissions RolePermission[]
}

model RolePermission {
  id            Int        @id @default(autoincrement())
  role          RoleType
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id Int
}

model FileCategory {
  id          Int      @id @default(autoincrement())
  division    Division @relation(fields: [division_id], references: [id])
  division_id Int
  name        String
  files       File[]
}

model File {
  id               Int          @id @default(autoincrement())
  name             String
  url              String
  type             String
  size             Int
  division         Division     @relation(fields: [division_id], references: [id])
  division_id      Int
  uploaded_by      User         @relation(fields: [uploaded_by_id], references: [id])
  uploaded_by_id   Int
  file_category    FileCategory @relation(fields: [file_category_id], references: [id])
  file_category_id Int
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model Badge {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  icon_url    String?
  criteria    String
  created_at  DateTime
  awarded     MemberBadge[]
}

model MemberBadge {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  badge      Badge    @relation(fields: [badge_id], references: [id])
  badge_id   Int
  awarded_by Int
  awarded_at DateTime
}

model UserSettings {
  id                         Int     @id @default(autoincrement())
  user                       User    @relation(fields: [user_id], references: [id])
  user_id                    Int     @unique
  auto_add_event_to_calendar Boolean
  phone_public               Boolean
}
